find_package(LAPACK REQUIRED)

set(UTIL_SOURCES util.F90 tree.f90 list.f90 hdf5_exceptions.F90 darray.F90)
add_library(lightda_util SHARED ${UTIL_SOURCES})
target_include_directories(lightda_util INTERFACE
  $<INSTALL_INTERFACE:${Fortran_MODULE_DIRECTORY}>)
target_link_libraries(lightda_util PUBLIC fortran_exceptions)
target_link_libraries(lightda_util PUBLIC system_mpi)
configure_hdf5_target(lightda_util)
configure_mpi_target(lightda_util)
install(TARGETS lightda_util EXPORT lightda)

set(RANDOM_SOURCES random.f90 random_integer.f90)
add_library(lightda_random SHARED ${RANDOM_SOURCES})
install(TARGETS lightda_random EXPORT lightda)

set(LIGHTDA_SOURCES dummy_assimilator.f90 base_assimilation_manager.F90 assimilation_filter.F90 assimilation_batch_manager.F90 assimilation_model_interface.F90 observations.F90 localization.f90 observation_manager.F90 forward_operator.F90 assimilation_manager.F90)
add_library(lightda SHARED ${LIGHTDA_SOURCES})
target_link_libraries(lightda PUBLIC lightda_random lightda_util system_mpi)
configure_mpi_target(lightda)
target_include_directories(lightda INTERFACE
  $<INSTALL_INTERFACE:${Fortran_MODULE_DIRECTORY}>)
install(TARGETS lightda EXPORT lightda)

set(ADVECT1D_ASSIMILATE_INTERFACES_SOURCES advect1d_observations.F90 advect1d_assimilate_interfaces.F90 advect1d_forward_operator.F90 advect1d_localizer.F90)
add_library(advect1d_assimilate_interfaces ${ADVECT1D_ASSIMILATE_INTERFACES_SOURCES})
target_link_libraries(advect1d_assimilate_interfaces PRIVATE lightda)
configure_hdf5_target(advect1d_assimilate_interfaces)
target_include_directories(advect1d_assimilate_interfaces PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

set(ADVECT1D_SOURCES advect1d.f90)
add_library(advect1d SHARED ${ADVECT1D_SOURCES})

set(ALL_SOURCES ${UTIL_SOURCES};${RANDOM_SOURCES};${LIGHTDA_SOURCES};
  ${ADVECT1D_ASSIMILATE_INTERFACES_SOURCES};${ADVECT1D_ASSIMILATE_SOURCES};
  ${ADVECT1D_SOURCES})

# Prepend path to sources and propagate to parent scope
list(TRANSFORM ALL_SOURCES PREPEND "src/")
set(ALL_SOURCES ${ALL_SOURCES} PARENT_SCOPE)
