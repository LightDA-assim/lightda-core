find_package(LAPACK REQUIRED)

set(UTIL_SOURCES util.F90 tree.f90 list.f90 hdf5_exceptions.F90 darray.F90)
add_library(util SHARED ${UTIL_SOURCES})
target_include_directories(util PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
target_link_libraries(util PUBLIC fortran_exceptions)
target_link_libraries(util PUBLIC system_mpi)
configure_hdf5_target(util)
configure_mpi_target(util)

set(RANDOM_SOURCES random.f90 random_integer.f90)
add_library(random SHARED ${RANDOM_SOURCES})

set(ASSIM_SOURCES dummy_assimilator.f90 base_assimilation_manager.F90 assimilation_filter.F90)
add_library(assim SHARED ${ASSIM_SOURCES})
target_link_libraries(assim PRIVATE random util)
target_link_libraries(assim PRIVATE ${LAPACK_LIBRARIES})
target_include_directories(assim PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

set(ASSIM_PARALLEL_SOURCES assimilation_batch_manager.F90 assimilation_model_interface.F90 observations.F90 localization.f90 observation_manager.F90 forward_operator.F90 assimilation_manager.F90)
add_library(assim_parallel SHARED ${ASSIM_PARALLEL_SOURCES})
target_link_libraries(assim_parallel PUBLIC random assim system_mpi util)
configure_mpi_target(assim_parallel)
target_include_directories(assim_parallel PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

set(ADVECT1D_ASSIMILATE_INTERFACES_SOURCES advect1d_observations.F90 advect1d_assimilate_interfaces.F90 advect1d_forward_operator.F90 advect1d_localizer.F90)
add_library(advect1d_assimilate_interfaces ${ADVECT1D_ASSIMILATE_INTERFACES_SOURCES})
target_link_libraries(advect1d_assimilate_interfaces PRIVATE assim assim_parallel system_mpi)
configure_hdf5_target(advect1d_assimilate_interfaces)
target_include_directories(advect1d_assimilate_interfaces PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

set(ADVECT1D_SOURCES advect1d.f90)
add_library(advect1d SHARED ${ADVECT1D_SOURCES})

set(ALL_SOURCES ${SYSTEM_MPI_SOURCES};${UTIL_SOURCES};${ASSIM_SOURCES};
  ${RANDOM_SOURCES};${ASSIM_PARALLEL_SOURCES};
  ${ADVECT1D_ASSIMILATE_INTERFACES_SOURCES};${ADVECT1D_ASSIMILATE_SOURCES};
  ${ADVECT1D_SOURCES})

# Prepend path to sources and propagate to parent scope
list(TRANSFORM ALL_SOURCES PREPEND "src/")
set(ALL_SOURCES ${ALL_SOURCES} PARENT_SCOPE)
